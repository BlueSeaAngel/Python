import tensorflow as tf
import numpy as np
import logging
logger = tf.get_logger()
logger.setLevel(logging.ERROR)

import os
clear = lambda: os.system("cls")
clear()

# Construir una capa → l0 = layer 0
l0 = tf.keras.layers.Dense(units=1, input_shape=[1])
# Unir capas al modelo
model = tf.keras.Sequential([l0])

# Compilar el modelo

model.compile(loss='mean_squared_error', optimizer=tf.keras.optimizers.Adam(0.1))

# Entrenamiento del modelo

history = model.fit(celsius_q, fahrenheit_a, epochs=500, verbose=False)
print("Finished training the model")

# Mostrar estadísticas

import matplotlib.pyplot as plt
plt.xlabel('Epoch Number')
plt.ylabel("Loss Magnitude")
plt.plot(history.history['loss'])

# Ejemplo con una predicción

print(model.predict([100.0]))

# Imprimir las variables del modelo

print("These are the layer variables: {}".format(l0.get_weights()))
